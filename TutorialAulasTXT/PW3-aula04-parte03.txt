 ğŸ“Œ PropagaÃ§Ã£o e DelegaÃ§Ã£o de Eventos (event.target e event.currentTarget)

 1-O que Ã© PropagaÃ§Ã£o de Eventos?
A propagaÃ§Ã£o de eventos em JavaScript define como os eventos fluem atravÃ©s do DOM (Document Object Model). 
Quando um evento ocorre, ele pode se propagar de duas formas:

- Fase de Captura (Capturing Phase): O evento comeÃ§a no topo do DOM e desce atÃ© o elemento alvo.
- Fase de PropagaÃ§Ã£o (Bubbling Phase): O evento inicia no elemento alvo e sobe atÃ© o topo do DOM.

Por padrÃ£o, o JavaScript usa a propagaÃ§Ã£o de eventos (bubbling), ou seja, 
o evento ocorre primeiro no elemento clicado e depois sobe para seus elementos ancestrais.

 ğŸ“Œ Exemplo de PropagaÃ§Ã£o (Bubbling)

<div id="pai">
	<button id="filho">Clique aqui</button>
</div>

<script>
	document.getElementById("pai").addEventListener("click", function() {
	console.log("Evento no PAI!");
	});

	document.getElementById("filho").addEventListener("click", function() {
	console.log("Evento no FILHO!");
	});
</script>

âœ… ExplicaÃ§Ã£o:
- Quando o usuÃ¡rio clica no botÃ£o (filho), ele dispara o evento primeiro no botÃ£o e depois no div pai.

ğŸ“Œ SaÃ­da esperada no console ao clicar no botÃ£o: 

Evento no FILHO!
Evento no PAI!


 ğŸ“Œ Interrompendo a PropagaÃ§Ã£o
Se quisermos impedir que o evento se propague para os elementos ancestrais, usamos event.stopPropagation().


document.getElementById("filho").addEventListener("click", function(event) {
	 event.stopPropagation(); // Impede a propagaÃ§Ã£o para o elemento pai
	 console.log("Evento no FILHO!");
});

ğŸ“Œ Agora, ao clicar no botÃ£o, somente esta mensagem serÃ¡ exibida no console: 

Evento no FILHO!

2-O que Ã© DelegaÃ§Ã£o de Eventos?
A delegaÃ§Ã£o de eventos permite associar um evento a um elemento pai para capturar eventos de seus filhos, 
mesmo que esses elementos sejam criados dinamicamente.

Isso Ã© Ãºtil quando temos vÃ¡rios elementos dentro de um contÃªiner e queremos capturar eventos sem precisar adicionar ouvintes 
(addEventListener()) para cada um deles.

 ğŸ“Œ Exemplo sem DelegaÃ§Ã£o de Eventos (CÃ³digo Ineficiente)

<button class="botao">BotÃ£o 1</button>
<button class="botao">BotÃ£o 2</button>
<button class="botao">BotÃ£o 3</button>

<script>
 let botoes = document.querySelectorAll(".botao");

 botoes.forEach(botao => {
		 botao.addEventListener("click", function() {
		 console.log("BotÃ£o clicado!");
	 });
 });
</script>

âœ… Problema: 
Se adicionarmos novos botÃµes dinamicamente via JavaScript, eles nÃ£o terÃ£o o evento associado.


 ğŸ“Œ SoluÃ§Ã£o: DelegaÃ§Ã£o de Eventos
Em vez de adicionar eventos a cada botÃ£o individualmente, adicionamos o evento ao elemento pai, 
que capturarÃ¡ o evento de qualquer botÃ£o dentro dele.


<div id="container">
 <button class="botao">BotÃ£o 1</button>
 <button class="botao">BotÃ£o 2</button>
 <button class="botao">BotÃ£o 3</button>
</div>

<script>
 document.getElementById("container").addEventListener("click", function(event) {
	 if (event.target.classList.contains("botao")) {
		console.log(`VocÃª clicou no botÃ£o: ${event.target.textContent}`);
	 }
 });
</script>

âœ… Vantagens da DelegaÃ§Ã£o de Eventos: 
ğŸ”¹ Funciona mesmo se adicionarmos novos botÃµes dinamicamente. 
ğŸ”¹ Reduz o nÃºmero de ouvintes de eventos, melhorando a performance. 


3-DiferenÃ§a entre event.target e event.currentTarget
Quando um evento ocorre, temos dois elementos importantes:

- event.target â†’ O elemento que disparou o evento.
- event.currentTarget â†’ O elemento ao qual o evento estÃ¡ associado.

 ğŸ“Œ Exemplo PrÃ¡tico

<div id="pai">
	<button id="filho">Clique aqui</button>
</div>

<script>
	 document.getElementById("pai").addEventListener("click", function(event) {
		 console.log("Elemento que disparou o evento:", event.target);
		 console.log("Elemento com o evento associado:", event.currentTarget);
	 });
</script>


âœ… ExplicaÃ§Ã£o: 
- Se o usuÃ¡rio clicar no botÃ£o (filho) dentro do div pai:
 ğŸ“Œ event.target serÃ¡ o botÃ£o (<button>), pois foi ele quem disparou o evento. 
 ğŸ“Œ event.currentTarget serÃ¡ o div pai, pois o evento foi associado a ele. 

ğŸ”¹ SaÃ­da esperada no console ao clicar no botÃ£o: 

Elemento que disparou o evento: <button id="filho">Clique aqui</button>
Elemento com o evento associado: <div id="pai"></div>


---

 ğŸ“Œ ConclusÃ£o
- PropagaÃ§Ã£o de eventos pode ser interrompida com event.stopPropagation(). 
- DelegaÃ§Ã£o de eventos melhora a performance e permite capturar eventos em elementos dinÃ¢micos. 
- event.target aponta para o elemento que disparou o evento, enquanto event.currentTarget aponta para o elemento que tem o evento associado. 

Agora que entendemos propagaÃ§Ã£o e delegaÃ§Ã£o de eventos, podemos testar com um exemplo prÃ¡tico! ğŸš€ğŸ˜Š 

Se precisar de ajustes ou quiser adicionar algo, me avise!