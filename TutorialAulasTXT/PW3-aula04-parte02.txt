 ğŸ“Œ addEventListener() e removeEventListener() em JavaScript

 1-O que sÃ£o addEventListener() e removeEventListener()?
O JavaScript permite que adicionemos e removamos eventos de elementos HTML dinamicamente utilizando os mÃ©todos
 addEventListener() e removeEventListener(). 

ğŸ”¹ addEventListener() â†’ Adiciona um evento a um elemento sem sobrescrever outros eventos existentes. 
ğŸ”¹ removeEventListener() â†’ Remove um evento previamente adicionado. 

Esses mÃ©todos sÃ£o mais flexÃ­veis do que os atributos de evento no HTML, pois permitem adicionar mÃºltiplos 
eventos ao mesmo elemento sem sobrescrevÃª-los.



2-Como funciona o addEventListener()?
A sintaxe bÃ¡sica do `addEventListener()` Ã©:

elemento.addEventListener(tipoDoEvento, funÃ§Ã£o, usoCapturaOpcional);


ğŸ“Œ ParÃ¢metros: 

1tipoDoEvento â†’ Nome do evento a ser escutado ("click", "keydown", "submit", etc.). 
2funÃ§Ã£o â†’ A funÃ§Ã£o que serÃ¡ executada quando o evento ocorrer. 
3(Opcional) usoCapturaOpcional â†’ Define se o evento serÃ¡ capturado na fase de captura (padrÃ£o: false). 

ğŸ”¹ Exemplo 1 â€“ addEventListener() com clique 


<button id="botao">Clique Aqui</button>
<p id="mensagem">Aguardando clique...</p>

<script>
	 document.getElementById("botao").addEventListener("click", function() {
	 document.getElementById("mensagem").textContent = "BotÃ£o clicado!";
 });
</script>


âœ… ExplicaÃ§Ã£o: 
- O evento "click" Ã© adicionado ao botÃ£o. 
- Quando o usuÃ¡rio clica no botÃ£o, o texto do parÃ¡grafo muda. 



3-Como funciona o `removeEventListener()`?
O removeEventListener() remove um evento que foi previamente adicionado com addEventListener(). 

ğŸ”¹ Sintaxe: 

elemento.removeEventListener(tipoDoEvento, funÃ§Ã£o);

ğŸ“Œ Importante: 
- O nome da funÃ§Ã£o deve ser o mesmo ao adicionar e remover o evento. 
- FunÃ§Ãµes anÃ´nimas nÃ£o podem ser removidas, pois o removeEventListener() nÃ£o consegue identificÃ¡-las.

ğŸ”¹ Exemplo 2 â€“ removeEventListener()

<button id="botao">Clique Aqui</button>
<button id="remover">Remover Evento</button>
<p id="mensagem">Aguardando clique...</p>

<script>
 function mostrarMensagem() {
	document.getElementById("mensagem").textContent = "BotÃ£o clicado!";
 }

 let botao = document.getElementById("botao");
 let botaoRemover = document.getElementById("remover");

 botao.addEventListener("click", mostrarMensagem);

 botaoRemover.addEventListener("click", function() {
	botao.removeEventListener("click", mostrarMensagem);
	document.getElementById("mensagem").textContent = "Evento removido!";
 });
</script>


âœ… ExplicaÃ§Ã£o: 
- O botÃ£o principal (`botao`) recebe um evento de clique. 
- O botÃ£o de remover (`botaoRemover`) remove esse evento. 
- ApÃ³s remover, o botÃ£o principal nÃ£o faz mais nada ao ser clicado. 



4-DiferenÃ§a entre `onclick` e `addEventListener()`
Muitos iniciantes adicionam eventos assim:


document.getElementById("botao").onclick = function() {
	console.log("BotÃ£o clicado!");
};

O problema Ã© que isso sobrescreve eventos anteriores no mesmo elemento. 
JÃ¡ com addEventListener(), podemos adicionar vÃ¡rios eventos ao mesmo elemento sem sobrescrevÃª-los.

ğŸ”¹ Exemplo â€“ Dois eventos no mesmo botÃ£o 

let botao = document.getElementById("botao");

botao.addEventListener("click", function() {
	console.log("Evento 1");
});

botao.addEventListener("click", function() {
	console.log("Evento 2");
});

âœ… Resultado: Quando o botÃ£o for clicado, ambos os eventos serÃ£o executados. Isso nÃ£o seria possÃ­vel usando onclick.



 ğŸ“Œ ConclusÃ£o
- addEventListener() Ã© a forma mais flexÃ­vel de adicionar eventos no JavaScript. 
- removeEventListener() permite remover eventos especÃ­ficos. 
- Ã‰ preferÃ­vel usar addEventListener() em vez de onclick, pois evita sobrescrever eventos. 

