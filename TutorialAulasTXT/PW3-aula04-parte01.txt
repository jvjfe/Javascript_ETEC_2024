 ğŸ“Œ O que sÃ£o eventos em JavaScript e como funcionam?

 1-O que sÃ£o eventos?
Eventos em JavaScript sÃ£o aÃ§Ãµes ou ocorrÃªncias que acontecem na pÃ¡gina web e podem 
ser detectadas pelo navegador. 
Os eventos sÃ£o a principal forma de interaÃ§Ã£o entre o usuÃ¡rio e a pÃ¡gina.

 ğŸ“Œ Exemplos de eventos comuns:
âœ… Um clique em um botÃ£o 
âœ… Pressionar uma tecla no teclado 
âœ… Enviar um formulÃ¡rio 
âœ… Passar o mouse sobre um elemento 
âœ… Carregamento da pÃ¡gina 

Os eventos permitem que a pÃ¡gina reaja Ã s aÃ§Ãµes do usuÃ¡rio, tornando-a interativa e dinÃ¢mica.

 2-Como os eventos funcionam no JavaScript?
No JavaScript, podemos associar funÃ§Ãµes a eventos. 
Isso significa que podemos definir uma aÃ§Ã£o especÃ­fica que 
deve ser executada quando um evento acontece.

 ğŸ“Œ Exemplo bÃ¡sico:
Vamos criar um botÃ£o que exibe um alerta quando Ã© clicado.

 ğŸ“Œ CÃ³digo HTML:

<button onclick="mostrarAlerta()">Clique aqui</button>


 ğŸ“Œ CÃ³digo JavaScript:

function mostrarAlerta() {
 alert("VocÃª clicou no botÃ£o!");
}

âœ… ExplicaÃ§Ã£o: 
- O botÃ£o tem o atributo `onclick`, que chama a funÃ§Ã£o `mostrarAlerta()`. 
- Quando o botÃ£o Ã© clicado, o JavaScript executa a funÃ§Ã£o, que exibe um alerta na tela. 


 3-Tipos de eventos em JavaScript
Existem diversos tipos de eventos em JavaScript. Aqui estÃ£o alguns dos mais comuns:

 ğŸ”¹ Eventos de Mouse
- `click` â†’ Ocorre quando um elemento Ã© clicado.
- `dblclick` â†’ Ocorre quando um elemento Ã© clicado duas vezes rapidamente.
- `mouseover` â†’ Ocorre quando o mouse passa sobre um elemento.
- `mouseout` â†’ Ocorre quando o mouse sai de um elemento.

 ğŸ“Œ Exemplo:

<button onmouseover="mudarTexto()">Passe o mouse aqui</button>
<p id="mensagem">Texto original</p>



function mudarTexto() {
 document.getElementById("mensagem").textContent = "O mouse passou aqui!";
}

âœ… ExplicaÃ§Ã£o: Quando o mouse passa sobre o botÃ£o, o texto do `<p>` Ã© alterado.



 ğŸ”¹ Eventos de Teclado
- `keydown` â†’ Quando uma tecla Ã© pressionada.
- `keyup` â†’ Quando uma tecla Ã© solta.
- `keypress` â†’ Quando uma tecla Ã© pressionada e liberada.

 ğŸ“Œ Exemplo:

<input type="text" onkeydown="teclaPressionada(event)">
<p id="tecla"></p>



function teclaPressionada(event) {
 document.getElementById("tecla").textContent = `Tecla pressionada: ${event.key}`;
}

âœ… ExplicaÃ§Ã£o: Quando o usuÃ¡rio pressiona uma tecla no campo de entrada, o nome da tecla aparece na tela.


 ğŸ”¹ Eventos de FormulÃ¡rio
- `submit` â†’ Ocorre quando um formulÃ¡rio Ã© enviado.
- `change` â†’ Ocorre quando um campo de formulÃ¡rio Ã© alterado.
- `focus` â†’ Quando um campo de formulÃ¡rio recebe foco.
- `blur` â†’ Quando um campo de formulÃ¡rio perde o foco.

 ğŸ“Œ Exemplo:

<form onsubmit="enviarFormulario(event)">
 <input type="text" id="nome" required>
 <button type="submit">Enviar</button>
</form>
<p id="mensagem"></p>



function enviarFormulario(event) {
 event.preventDefault(); // Evita o envio padrÃ£o do formulÃ¡rio
 document.getElementById("mensagem").textContent = "FormulÃ¡rio enviado com sucesso!";
}

âœ… ExplicaÃ§Ã£o: O formulÃ¡rio nÃ£o serÃ¡ enviado para outra pÃ¡gina. 
Em vez disso, a mensagem serÃ¡ exibida na tela.



 4-Como lidar com eventos em JavaScript?
Podemos associar eventos a elementos de trÃªs formas:

 ğŸ”¹ 1. Diretamente no HTML (menos recomendado)

<button onclick="mostrarMensagem()">Clique aqui</button>


 ğŸ”¹ 2. AtravÃ©s do JavaScript (recomendado)

document.getElementById("meuBotao").onclick = mostrarMensagem;


 ğŸ”¹ 3. Usando `addEventListener()` (mais flexÃ­vel e recomendado)

document.getElementById("meuBotao").addEventListener("click", mostrarMensagem);


Vamos detalhar `addEventListener()` no prÃ³ximo tÃ³pico! ğŸš€



 ğŸ“Œ ConclusÃ£o
- Eventos permitem interatividade na pÃ¡gina.
- Podemos detectar eventos de clique, teclado, formulÃ¡rio, etc.
- Eventos podem ser associados diretamente no HTML ou no JavaScript.
- O mÃ©todo `addEventListener()` Ã© a abordagem mais recomendada.

